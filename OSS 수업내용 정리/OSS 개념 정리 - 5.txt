<버전과 태그 활용>
버전 - 프로그램을 수정하거나 졔산할 때마다 코드를 구분하려고 부여된 식별자를 의미
(보통 숫자를 사용하거나 년,월을 사용하기도 함)

SemVer(Semantic Versioning)방식
major.minor.patch
세 자리 숫자 형태로 표기하는 버전
major 번호 - 첫 자리가 0이면 아직 초기 개발 중인 제품이라는 의미, 정식 버전은 1부터 시작하는 데 이를 major 버전이라고 한다.

minor 번호 - 메이저 버전에서 기능을 추가하거나 변경 사항이 있을 때 바꿈

patch 번호 - 버그 수정 등 미미한 변화가 있을 때 바꿈

ex)1.39.2 등

<태그>
태그 -  특정 커밋(해시 값)에 번호나 다른 이름을 부여하는 기능

주석 태그 - 네그 이름 + 정보(태그 작성자 이메일, 태그 시각, 태그 메세지) 포함
일반(가벼운) 태그 - 태그 이름만 포함


주석 태그(annotated) 태그  - 주석(누가, 언제, 태그 메세지 등의 정보)이 있는 태그, 태그 이름 중복 불가능

git tag -a v1.0.0 -m 'first version'  <- 작성자의 이메일이나 날짜, 메시지 등 정보를 포함

git tag -a v1.0.0  <- 기본 설정된 편집기로 메세지 편집

git tag -a v1.1.0 commitID  <- 특정 커밋에 태그를 붙임


일반 태그  - 태그의 버전 정보만 관리, 티그 버전 이름 중복 불가 -a -m 을 사용할 수 없음
git tag v1.0.1


git tag  - 태그 보기 <- 가장 예전 태그부터 표시
git log  - 최신 커밋부터 표시

git show v1.0.1  <- 태그의 여러 정보 표시

git tag -d v1.0.0  <- 태그 삭제

< 브랜치 개요와 관리 >
깃 브랜치
파일을 작성 작업을 하다 보면 여러 파일을 관리하는 폴더를 통째로 복사해 활용하는 일이 자주 발생,
버전 관리를 수행하던 일련의 파일 작업을 통째로 복사해 독립적으로 다시 개발을 진행하는 개념
-여러 개발자가 타인을 신경쓰지 않고 동시에 다양한 적업을 할 수 있게 만들어 주는 기능
-브랜치를 통해 하나의 프로젝트를 여러 갈래로 나누어서 관리

브랜치 병합 (merge)
-독립된 브랜치에서 마음대로 소스 코드를 변경하여 작업한 후 원래 버전과 합칠 수 있음

브랜치 사용 장점
-저장소에서 다른 브랜치에는 영향 없이 수행가능 <- 새로운 기능 개발, 버그 수정하거나 새로운 아이디어 실험을 안전하게 진행할 수 있음

브랜치 병합 - 브랜치와 브랜치를 합치는 수행

기본 브랜치 - main 또는 master으로 설정 함 (현재는 main이 default)
git config -global init.defaultNranch main  <- 기본 브랜치 이름 설정
git branch -M newname  <- 이미 생성된 브랜치 이름 수정 (newname으로 브랜치 이름을 수정)


브랜치 - 커밋 사이를 가볍게 이동할 수 있는 포인터

HEAD - 작업 중인 브랜치의 최신 커밋을 가리키는 포인터 
- 필요에 따라 특정 커밋이나 브랜치를 가리키도록 헤드 이동 가능

결과 표시(HEAD -> main)
main은 현재 커밋을 가리키고
HEAD는 현재 작업 브랜치인 main을 가리킨다.

처음 커밋 - main 브랜치는 생성된 커밋을 가리킴, 커밋이 계속 발생 
-mian 브랜치는 자동으로 마지막 커밋을 가리킴

생성
git branch bname  <- 브랜치를 단순히 생성하고 이동은 안함

생성하고 새 브랜치로 HEAD 이동도 수행
git switch -c bname
git checkout -b bname


git branch  <- 커밋이 발생한 브랜치 목록 보이기
git branch -v  <- 브랜치마다 마지막 커밋 ID와 메시지도 함께 표시

이전 브랜치로 이동
git switch -
git checkout -

다른 브랜치로 이동
git checkout [branch]
git switch [branch]

분리된 HEAD
-HEAD가 현재 브랜치가 아닌 그 이전 커밋을 가리키는 상태

git checkout HEAD~   <- 현재 브랜치에서 마지막 커밋 이전 커밋으로 이동

이동 커밋 - 상대적인 HEAD~ 또는 HEAD^^, commit ID를 사용
물결~ : tilde (틸드)
삿갓, 모자 ^ : caret(커렛)

< 브랜치 관리 >
브랜치 삭제
git branch [-d | --delete ] [branchName]  <- 지정한 branchName(이미 병합된)을 삭제
git branch -D [branchName]  <-지정한 branchName(병합되지 않더라도)을 삭제

브랜치 목록 보기
git branch -merged  <- 현재 작업 브랜치를 기준으로 병합된 브랜치 목록 표시
git branch -no-merged  <- 현재 작업 브랜치를 기준으로 아직 병합되지 않은 브랜치 목록 표시 
git branch --merged branchName  <- 인자인 branchName 브랜치를 기준으로 병합된 브랜치 목록 표시
git branch --no -merged branchName  <- 인자인 branchName 브랜치를 기준으로 아직 병합되지 않은 브랜치 목록 표시

git branch -h  <- 도움말 표시

git checkout -b [newBranch]  <- 새로운 브랜치를 생성하고 이동
git switch -s [newBranch]  <- 새로운 브랜치를 생성하고 이동
