<파일 비교>
깃 3영역의 팡리 비교
커밋 간의 파일 비교
브랜치 간의 파일 비교
'~'  <-  tilde, 틸드, 물결
'^'  <- Caret, 커렛, 삿갓, 모자

작업 디렉토리 -add-> 스테이징 영역 -commit-> 깃(지역) 저장소
리눅스 명령어 ls로 보이는 파일 -> working
깃 명령 git ls -files로 보이는 파일은 스테이징 영역이다.

<git diff>
git diff <- 스테이지 영역 기준에서 자업 디렉토리 비교

git diff --staged [HEAD]  <- 깃 저장소 기준으로 스테이징 영역 비교
git diff --cached  <- 위와 동일함 
양쪽이 같다면 결과가 표시되지 않는다.

git diff HEAD  <- 깃 저장소 HEAD를 기준으로 작업 디렉토리 비교

git diff HEAD~2  <- 저장소 HEAD~2를 기준으로 작업 디렉토리 비교


< 두 버전과의 파일 비교 diff >
git diff HEAD~2 HEAD~  <- HEAD~2를 기준으로 HEAD~를 비교
git diff HEAD~ HEAD  <- HEAD~를 기준으로 HEAD를 비교
git diff HEAD~2 HEAD  <- HEAD~2를 기준으로 HEAD를 비교

git diff HEAD HEAD~  <- HEAD를 기준으로 HEAD~를 비교

-updated at working dir  <- 기준 위치에서 '-updated at working dir' 이 존재하는 줄이나 비교대상인 HEAD~에서는 빠진 줄임을 의미 

< 파일 삭제 rm과 복원 restore >
리눅스 명령어
rm [file]  <- 작업 디렉토리에서 file 삭제

git rm [file]  <- 작업 디렉토리와 스테이징 영역에서 모두 file 삭제

git rm -cached [file]  <- 스테이징 영역에서 file 삭제 > 작업 디렉토리에서는 삭제 안됨 
git ls -files (스테이징 영역의 파일을 확인하는 방법) 결과에서 보이지 않음 > 기본적으로 스테이징 영역의 파일 목록을 표시
tracked 상태에서 untrack 상태가 됨

git commit -m 'Delete g' <- g 가 삭제된 커밋

< 파일 복원 restore >
git restore f  <- 작업 디렉토리에 있던 f파일을 스테이징 영역에 있던 파일로 교체한다.

git restore --staged f  <-  깃 저장소 영역에 있던 파일 f를 스테이징 영역에 복구한다.

git restore --source=HEAD --staged --worktree f  <- 깃 저장소 내용으로 한번에 모두 복구

git restore --source=HEAD f  <- 파일 f가 현재 커밋 상태의 내용으로 작업디렉토리에 복원
git restore --source=HEAD [--worktree] f  <- 파일 f가 현재 커밋 상태의 내용으로 작업디렉토리에 복원

git restore -- source=HEAD^ --staged [file]  <- 바로 이전의 파일을 스테이지 영역에 복원

git restore --source=HEAD --staged f  <- 깃 저장소의 내용을 스테이지 영역에 복원 (git restore --staged f) 과 같음

