working directory & working tree

staging Area & index

git repository


 - git add: working -> staging 

- git commit : staging -> git respository 

git statsu [--long]    <- 현재 상태보기, 기본값
git statsu [-short | -s]    <- 현채 상태를 간단히 표시
git config --global --edit    <- 도움말보기

수정 라다이렉션 -> '>' , 추가 라이이렉션 -> '>'
echo create > hello.txt    <- hello.txt 파일 생성

cat hello.txt    <- hello.txt 파일 확인
create

untracked file <- 추적되지 않는 파일
관리되지 않는 파일 이라고 한다.

git add hello.txt  <- hello 파일을 stage 영역에 추가 (복사) 함

<commit>
git commit    <- 커밋 메세지를 입력할 기본 편집기 실해됨
git commit -m    <- 커밋 메세지 직접입력
git commit -am 'message'    <-추과와 함께 커밋을 함께 실행
git commit -a -m 'messgae'    <- 추가와 함께 커밋을 실행

untracked file은 추가한 이후에 커밋을 해야함
깃에서 추가와 커밋을 동시에 불가능

git commit -m A     <- 커밋 메세지를 A라고 씀
첫 줄 메세지 제목,
한 줄 뛰우고 
메세지 내용을 자세하게 적음

<git log>
git log     <- 로기 이력 정보를 표시
git long --oneline    <- 로그 이력을 한줄로 표시
git log [--patch | -p]    <- 로그 이력과 함께 파일의 변화를  표시

모든 커밋을 구분하기 위한 번호인 '커밋 ID' or '체크썸(checksum)' 

함호학의 SHA -1
f(key) - value
160 비트 미는 40개의 16진수로 표시

--oneline     <- 한 줄로 간단히
커밋 ID는 40개 16진수 중에 맨 7개 자리만 표시

--patch, -p    <- 커밋 정보뿐만이 아니라 이전 커밋과 현재 커밋 파일의 차이가 표시
첫 커밋이므로
/dev/nell
현재 커밋 파일은 b/hello.txt 임을 표시

<git show>
git show      <- 마지막 커밋(HEAD)의 커밋 정보 표시
git show --oneline   <- 커밋 로그 한 줄과 파일 차이 표시
git show -s     <- 파일의 차이는 표시되지 않음
git show [HEAD]   <- 지정한 HEAD의 커밋 정보 표시
git show [commit ID]   <- 지정한 commitID의 정보 표시

git log과 git show와의 차이 log - git의 모든 정보 표시 show 지정한 정보 표시

파일 처음 생성되면 
untracked file <- 붉은색 - 붉은 색은 작업 디렉토리를 의미

처음 add한 파일
A new file <- 녹색 - 스테이징 영역을 의미

다시 수정한 파일 
Modified fille 
<- 붉은 색 - 붉은 색 표시는 작업 디렉토리를 의미, 작업 디렉토리 영역에서 파일이 수정된 것을 의미
<- 녹색 - 녹색 표시는 스테이징 영역을 의미, 최근 커밋과 비교해서 스테이징 영역의 파일이 수정된 것을 의미

git log <- 커밋 로그 모두 보기
git show <- 특정한 커밋 로그 보기

git log  <- 기본적으로 가장 최근의 커밋 부터 표시

git log 옵션
git log --graph  <- 문자 그림으로 로그 이력 그리기
git log --reverse  <-오래된 커밋부터 표시
git log --all  <- 모든 브랜치의 로그 이력 표시
git log -n  <- 최근 n개의 로그 이력 표시

<깃 설정>
사용자 이름과 전자 메일 설정 - 설정 값에서 큰 따음표와 작은 따음표 모두 사용 가능하며 공백이 없으면 따음표 생략이 가능

core.editor ['code --wait' | 'notepad' ]  <- 기본 편집기 설정
core.autocrlf [ture | false | input]  <- 줄바꿈 자동변환
core.safecrlf [ture | false] <- 줄바꿈 안전확인
user.name  <- 사용자 이름 설정
user.email  <- 사용자 이메일 설정
init.defaultBranch main  <- 기본 브랜치 이름

<설정 명령과 설정 범위>
git config --설정범위 설정변수 설정값

[설정범위]
[--system | --global | --local ]
system - 모든 사용자
global - 현재 모든 저장소
local - 현재 사용자의 현재 저장소

--global 옵션








