3-way 상태에서 base의 이해
'master'브랜치 커밋에서 B에서 분기되는 'bugfix'브랜치 
A-->B-->C-->D(master)
    B-->X-->Y(bugfix)

git rebase master
재배치 rebase 병합 수행

 base를 수정
  -> B에서 마스터의 최신 커밋인 D로 수정
      D 이후에 bugfix를 배치
 이후 다시 'fast-forward 병합' 수행: 이 병합을 직접 다시 해야함
  master 브랜치의 HEAD가 'bugfix'브랜치 마지막 커밋으로 이동  -> 로그 이력이 분기 없이 하나의 줄기로 이어짐
A-->B-->C-->D-->X'-->Y'(master, bugfix) (선형적)

git rebase master <- rebase 만하면 다음 그림처럼 'master'의 위치는 그대로 유지 
 A-->B-->C-->D(master)-->X'-->Y'(bugfix)

git merge bugfix  <- 마스터 브랜치 위치 변경을 위해 빨리 감기 병합(fast-foward)가 필요

충돌 발생 후 해결 절차
1. 파일 수정  2. 파일 추가 git add <수정 파일>  3.rebase 계속 수행, 마지막 메시지 수정 git rebase --continue


merge와 rebase 비교

merge - 여러 분기가 생긴 변경 내용의 이력이 모두 그대로 남아 있기 때문에 이력이 복잡해짐

rebase - 히스토리가 선형으로 단순해지고 좀 더 깨끗한 이력을 남김, 원래의 커밋 이력이 변경됨 <- 정확한 이력을 남길 필요가 있을 경우에는 사용하면 안됨
(분기로 나누어져 있는 것은 단순화 시킨다.)

fast-foward merge 와 rebase 비교
fast-foward merge 는 조상이 위치한 브랜치에서 선행 브랜치의 마지막으로 이동하는 병합이고 
rebase & merge 는 두 갈래 브랜치에서 기존의 베이스를 수정 <- 병합할 브랜치를 마지막 커밋을 새로운 베이스로 수정하는 병합

rebase 의 인자 rebase <newparent> <branch>

일반적인 방법
git checkout topic
git rebase main
git checkout main
git merge topic

다른 rebase 방법: 어느 브랜치든 main topic 순서로 재배치 방법
git rebase main topic
git checkout main
git merge topic

< 커밋 이력 수정 >
기본 편집기 설정
git config --global core.editor 'code --wait'

설정된 편집기로 최신 커밋 메세지 수정
git commit --amend <- 새로운 커밋 ID로 수정됨

최근 커밋 메시지를 직접 입력해 수정
git commit --amend -m "an updated commit message"  <- 새로운 커밋ID로 수정됨


최근 커밋 내용 수정
HEAD의 수정  <- 새로운 커밋ID로 추가됨

커밋 옵션 --amend
git commit --amend <- 기본 편집기로 편집
git commit --amend -m 'newmessage'  <- 명령어 상에 직접 메시지 입력
git commit --amend --no-edit  <- 메시지 수정 없이 다시 커밋 수정


rebase의 --interactive를 사용
 이전 커밋을 다시 작성한 경우, 이전 여러 개의 커밋을 수정

rebase의 --interactive를 사용하여 커밋 시퀀스를 새로운 기본 커밋에 결합
git rebase -i HEAD~3
git rebase --interactive HEAD~3
 HEAD~3: 수정할 커밋의 직전 커밋
 실제 HEAD~2부터 수정 가능

rebase의 --interactive 주요 명령어
git rebase --interactive HEAD~3 
 기본 편집기로 열리며, HEAD~3이면 HEAD~2, HEAD~1, HEAD 3개의 행을 편집 가능
 로그 결과와 다르게 오래된 커밋부터 표시 

주요 rebase -i 대화형 명령어    <- 편집기에서 직접 수정
p(ick): 해당 커밋을 수정하지 않고 그대로 사용
r(eword): 개별 커밋 메시지를 다시 작성
s(quash): 계속된 이후 커밋을 삭제
d(rop): 커밋 자체를 삭제

git commit rebase --interactive HEAD~4 <- 최신 4개 부분 메시지 수정

명령 drop 마지막 커밋 삭제

