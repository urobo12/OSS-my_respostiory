< 브랜치 병합 >
병합 (merge)
 Fast-forward merge
 3-way merge

Fast-forward merge 빨리 감기
두 브랜치가 일렬로 있음, 현재 브랜치인 main이 앞에 있는 브랜치의 조사인 경우
main -->---->--->--> bugfix
병합 git merge bugfix

병합 후 --->-->-->bugfix,main

3-way merge: 두 분기가 갈라진 상태
 두 브랜치의 조상이 같은 경우
 main 브랜치 내의 변경 내용과 bugfix 브랜치 내의 변경 내용을 하나로 통합 필요

A--->B---->c--->D(main)
     B---->X--->Y(bugfix)

3-way 병합
 새로운 커밋을 사용하여 두 기록을 합침

3-way 병합 수행
 새로운 커밋 생성

A--->B---->c--->D(main)----->E
     B---->X--->Y(bugfix)--->E

두 브랜치 병합을 가져온 'merge commit' E를 생성
 병합 후 , 통합 브랜치인 'main'브랜치로 통합된 이력이 생성
 -m이 없으면 메세지 입력할 기본 편집기 실행

git merge bugfix  <- -m이 없으면 메시지 입력할 기본 편집기 실행(vscode 등)
git merge bugfix -m 'merge msg'

A--->B---->c--->D----->E(main)
     B---->X--->Y(bugfix)--->E

기본이 fast forqard 상태에서 non fast forward 병합 
git merge dev --no-ff
--no-ff 옵션을 사용하면 3-way 방식으로 병합할 수 있다.
위 옵션을 사용하면 일렬 상태여도 3-way 방식으로 병합할 수 있다.

병합 실행 시에 fast-forward 병합이 가능한 경우라도 3-way 병합을 수행하는 이유
 병합된 브랜치가 그대로 남기 때문에, 그 브랜치로 실행한 작업 및 브랜치 관리 면에서 유용하기 때문이다.

git merge {병합할 브랜치 명}  <- 보통의 병합, 융통성 있는 결합
git merge --no-ff {병합할_브랜치_명}  <- 무조건 3-way 병합되는 명령어

git merge --ff-only {병합할_브랜치_명}  <- 상태가 fast-Froward인 일렬 상태에서만 병합 진행
git merge --squash {병합할_브랜치_명}  <- 현재 브랜치에서 병합 대상과 합치는 커밋을 하나 생성해 병합, 병합되는 브랜치는 사용하지 않고 그대로 남음

--sqaush 옵션
 커밋 이력과 병합되는 브랜치 이력도 남기지 않음
 새로운 커밋에서 상대 브랜치의 내용을 모두 합해 새로운 커밋으로 병합
 (직접 메세지와 함께 커밋해야함)

git merge --squash topic 
(병합 이력이 남지 않는 다는 말이다. 브랜치가 사라진다는 것은 아니다.)

< 병합 충돌과 해결 >
병합 충돌
3-way 상태에서 두 브랜치의 동일 조상인 커밋 1을 기준
 병합할 두 브랜치 마지막 커밋 비교

-->1---->2---->(병합)-->충돌 발생
   1-->A-->B-->--^

[충돌의 기준]

파일 충돌 없음
 수정되지 않거나 한쪽 브랜치에서만 수정되면 
 - 파일 A는 브랜치 main에서만 수정
 - 파일 B는 브랜치 topic에서만 수정

파일 중돌 발생
 두 브랜치 모두에서 변경 사항이 달리 발생한 파일
 - 파일 C는 양쪽에서 수정 

[충돌 해결]
직접 파일 내용을 수정 후 저장
 - 충돌이 발생한 파일 C를 직접 편집
 - C' 또는 C" 또는 아에 다르게 수정 후 저장
계속해서 add, commit 진행
필요하면 합병된 이전 브랜치 삭제

[충돌한 파일 내부 표시]
3개의 표시로 구분

<<<<<<<< HEAD
현재 브랜치 HEAD의 수정 내용
========
병합되는 브랜치 feat/list의 수정 내용
>>>>>feat/list의 수정 내용

git merge --abort  <- 병합 취소
git merge feat/list  <- 다시 병합




